import { useState, useEffect, useContext } from "react";
import Layout from "@/components/common/Layout";
import styles from "@/styles/pages/Join.module.scss";
import { AuthContext } from "@/context/AuthContext";
import { Form, Input, Button, Checkbox, Tooltip, Spin } from "antd";
import {
  UserOutlined,
  LockOutlined,
  AuditOutlined,
  QuestionOutlined,
} from "@ant-design/icons";
import Image from "next/image";
import Link from "next/link";
import { openNotificationWithIcon } from "@/helpers/notifications";

export default function Join() {
  const [withOrganization, setWithOrganization] = useState(false);
  const [loading, setLoading] = useState(false);
  const [form] = Form.useForm();
  const { register, error } = useContext(AuthContext);

  // useEffect(
  //   () => error && openNotificationWithIcon("error", error, ""),
  //   [error]
  // );

  const onFinish = (values) => {
    console.log("Received values of form: ", values);
    register(values, setLoading);
  };

  return (
    <Layout
      childern={
        <div className={styles.container}>
          <div className={styles.loginForm}>
            <h1>Join Now</h1>
            <Form
              form={form}
              name="register"
              onFinish={onFinish}
              scrollToFirstError
              layout="vertical"
            >
              <Form.Item
                name="email"
                label="E-mail"
                rules={[
                  {
                    type: "email",
                    message: "Please enter correct email address!",
                  },
                  {
                    required: true,
                    message: "Please input your email address!",
                  },
                ]}
              >
                <Input
                  prefix={<UserOutlined className="site-form-item-icon" />}
                />
              </Form.Item>

              <Form.Item
                name="password"
                label="Password"
                rules={[
                  {
                    required: true,
                    message: "Please input your password!",
                  },
                  { min: 8, message: "Password must be minimum 8 characters." },
                ]}
                hasFeedback
              >
                <Input.Password
                  prefix={<LockOutlined className="site-form-item-icon" />}
                />
              </Form.Item>

              <Form.Item
                name="confirm"
                label="Confirm Password"
                dependencies={["password"]}
                hasFeedback
                rules={[
                  {
                    required: true,
                    message: "Please confirm your password!",
                  },
                  ({ getFieldValue }) => ({
                    validator(_, value) {
                      if (!value || getFieldValue("password") === value) {
                        return Promise.resolve();
                      }
                      return Promise.reject(
                        new Error(
                          "The two passwords that you entered do not match!"
                        )
                      );
                    },
                  }),
                ]}
              >
                <Input.Password
                  prefix={<LockOutlined className="site-form-item-icon" />}
                />
              </Form.Item>

              {withOrganization && (
                <Form.Item
                  name="organizationName"
                  label={
                    <Tooltip
                      placement="right"
                      title="Your unique code is generated by the organization, please contact your organization for more information"
                    >
                      <span>Enter Organization Unique Code</span>
                      <QuestionOutlined style={{ marginLeft: "2px" }} />
                    </Tooltip>
                  }
                  rules={[
                    {
                      required: withOrganization,
                      message: "Please input your unique organization code!",
                    },
                  ]}
                >
                  <Input
                    prefix={<AuditOutlined className="site-form-item-icon" />}
                  />
                </Form.Item>
              )}

              <Form.Item name="withOrganization" valuePropName="checked">
                <Checkbox
                  onChange={(e) => setWithOrganization(e.target.checked)}
                  checked={withOrganization}
                >
                  Join with organization
                </Checkbox>
              </Form.Item>

              <Form.Item
                name="agreement"
                valuePropName="checked"
                rules={[
                  {
                    validator: (_, value) =>
                      value
                        ? Promise.resolve()
                        : Promise.reject(new Error("Should accept agreement")),
                  },
                ]}
              >
                <Checkbox>
                  I have read the <a href="">agreement</a>
                </Checkbox>
              </Form.Item>
              <Form.Item>
                {loading ? (
                  <Spin />
                ) : (
                  <Button type="primary" htmlType="submit">
                    Register
                  </Button>
                )}
              </Form.Item>
            </Form>
          </div>
          <div className={styles.imageContainer}>
            <Image
              alt=""
              className={styles.image}
              src={"/images/undraw_outer_space_re_u9vd.svg"}
              height={500}
              width={400}
            />
          </div>
        </div>
      }
    />
  );
}
